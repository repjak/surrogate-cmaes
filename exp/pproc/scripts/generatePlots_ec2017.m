%% EC 2017 journal plots
% Script for making graphs showing the dependence of minimal function
% values on the number of function values of compared algorithms.
%
% Created for the journal article for EC (2017).

%% load data

% checkout file containing all loaded data
tmpFName = fullfile('/tmp', 'ec2017comparison.mat');
if (exist(tmpFName', 'file'))
  load(tmpFName);
else

% needed function and dimension settings
funcSet.BBfunc = 1:24;
funcSet.dims = [2, 3, 5, 10, 20];
maxEvals = 250;

% folder for results
actualFolder = pwd;
articleFolder = fullfile(actualFolder(1:end - 1 - length('surrogate-cmaes')), 'latex_scmaes', 'ec2016paper');
plotResultsFolder = fullfile(articleFolder, 'img');
tableFolder = fullfile(articleFolder, 'data');
[~,~] = mkdir(plotResultsFolder);
[~,~] = mkdir(tableFolder);

% path settings
exppath = fullfile('exp', 'experiments');

scmaes_path = fullfile(exppath, 'S-CMA-ES_GP5');
dts005_multimodel_path = fullfile(exppath, 'exp_doubleEC_26');
dts005_1model_path = fullfile(exppath, 'exp_doubleEC_26_1model');
dts4crit_path = fullfile(exppath, 'exp_doubleEC_26_4crit');
dts_adapt_path = fullfile(exppath, 'exp_doubleEC_26_1model_adapt04');
maes_path = fullfile(exppath, 'MAES-MMP');
gpop_path = fullfile(exppath, 'GPOP');
sapeo_path = fullfile(exppath, 'SAPEO-ucp-2');

cmaes_path = fullfile(exppath, 'CMA-ES_1pop');
cmaes2pop_path = fullfile(exppath, 'CMA-ES_2pop');
saacmes_path = fullfile(exppath, 'BIPOP-saACM-k');
lmm_path = fullfile(exppath, 'lmm-CMA-ES');
bobyqa_path = fullfile(exppath, 'BOBYQA');
smac_path = fullfile(exppath, 'SMAC');
fmincon_path = fullfile(exppath, 'fmincon_MLSL');
fmincon_pure_path = fullfile(exppath, 'fmincon');

% load data
dataFolders = {scmaes_path; ...
               dts005_multimodel_path; ...
               dts005_1model_path; ... % let it the 3rd dataset (see below)
               dts4crit_path; ...
               dts_adapt_path; ...
               maes_path; ...
               gpop_path; ...
               sapeo_path; ...
               cmaes_path; ...
               cmaes2pop_path; ...
               saacmes_path; ...
               lmm_path; ...
               bobyqa_path; ...
               smac_path; ...
               fmincon_path; ...
               fmincon_pure_path ...
               };

[evals, settings] = catEvalSet(dataFolders, funcSet);

% find ids in settings
clear findSet
findSet.evoControl = 'doubletrained';
findSet.DTAdaptive_updateRateDown = 'obj.updateRate';
dts_adapt_Id = getStructIndex(settings, findSet);

clear findSet
findSet.evoControl = 'doubletrained';
findSet.modelOpts.predictionType = 'fvalues';
dts_critfvalues_Id = getStructIndex(settings, findSet);
clear findSet
findSet.evoControl = 'doubletrained';
findSet.modelOpts.predictionType = 'sd2';
dts_critsd2_Id = getStructIndex(settings, findSet);
clear findSet
findSet.evoControl = 'doubletrained';
findSet.modelOpts.predictionType = 'ei';
dts_critei_Id = getStructIndex(settings, findSet);
clear findSet
findSet.evoControl = 'doubletrained';
findSet.modelOpts.predictionType = 'expectedRank';
dts_criterde_Id = getStructIndex(settings, findSet);

clear findSet
findSet.evoControl = 'doubletrained';
findSet.modelOpts.predictionType = 'poi';
findSet.modelOpts.parameterSets_dimensions = [2 3 5 10 20];
dts005_multimodel_Id = getStructIndex(settings, findSet);

% % if the DTS/1model data should be loaded from the BBOB results
% clear findSet
% findSet.algName = 'DTS-CMA-ES_005-2pop_v26_1model';
% dts005_1model_Id = getStructIndex(settings, findSet);

% otherwise, DTS/1model should be the third dataset
dts005_1model_Id = 3;

clear findSet
findSet.algName = 'MAES-MMP';
maes_Id = getStructIndex(settings, findSet);
findSet.algName = 'GPOP';
gpop_Id = getStructIndex(settings, findSet);
findSet.algName = 'SAPEO-ucp-2';
sapeo_Id = getStructIndex(settings, findSet);
findSet.algName = 'CMA-ES_1pop';
cmaes_Id = getStructIndex(settings, findSet);
findSet.algName = 'CMA-ES_2pop';
cmaes2pop_Id = getStructIndex(settings, findSet);
findSet.algName = 'BIPOP-saACM-k';
saacmes_Id = getStructIndex(settings, findSet);
findSet.algName = 'lmm-CMA-ES';
lmm_Id = getStructIndex(settings, findSet);
findSet.algName = 'BOBYQA';
bobyqa_Id = getStructIndex(settings, findSet);
findSet.algName = 'SMAC';
smac_Id = getStructIndex(settings, findSet);
findSet.algName = 'S-CMA-ES_GP5';
scmaes_gp_Id = getStructIndex(settings, findSet);
findSet.algName = 'fmincon_MLSL';
fmincon_Id = getStructIndex(settings, findSet);
findSet.algName = 'fmincon';
fmincon_pure_Id = getStructIndex(settings, findSet);

all_Ids = [scmaes_gp_Id, dts005_multimodel_Id, dts_adapt_Id, ...
    dts_critfvalues_Id, dts_critsd2_Id, dts_critei_Id, dts_criterde_Id, ...
    maes_Id, gpop_Id, sapeo_Id, cmaes_Id, ...
    cmaes2pop_Id, saacmes_Id, lmm_Id, bobyqa_Id, smac_Id, fmincon_Id, fmincon_pure_Id];

if (dts005_1model_Id ~= setdiff(1:length(settings), all_Ids))
  error('The datasets for DTS 1model seems wrongly indexed!');
  dts005_1model_Id = setdiff(1:length(settings), all_Ids);
end

% extract data
scmaes_gp_data = evals(:, :, scmaes_gp_Id);
dts005_data    = evals(:, :, dts005_1model_Id);
dts005_multimodel_data    = evals(:, :, dts005_multimodel_Id);
dts_critfvalues_data = evals(:,:,dts_critfvalues_Id);
dts_critsd2_data  = evals(:,:,dts_critsd2_Id);
dts_critei_data   = evals(:,:,dts_critei_Id);
dts_criterde_data = evals(:,:,dts_criterde_Id);
dts_adapt_data = evals(:, :, dts_adapt_Id);
maes_data      = evals(:, :, maes_Id);
gpop_data      = evals(:, :, gpop_Id);
sapeo_data     = evals(:, :, sapeo_Id);
cmaes_data     = evals(:, :, cmaes_Id);
cmaes2pop_data = evals(:, :, cmaes2pop_Id);
saacmes_data   = evals(:, :, saacmes_Id);
lmm_data       = evals(:, :, lmm_Id);
bobyqa_data    = evals(:, :, bobyqa_Id);
smac_data      = evals(:, :, smac_Id);
fmincon_data   = evals(:, :, fmincon_Id);
fmincon_pure_data = evals(:, :, fmincon_pure_Id);

% color settings
scmaes_gpCol = getAlgColors(5); % dark red
dts005Col    = getAlgColors(6); % light red  % getAlgColors('dtscmaes');
dts_adaptCol = getAlgColors(24); % 24=light pink % 23=middle yellow
maesCol      = getAlgColors(4); % alien green
gpopCol      = getAlgColors(20); % middle blue
cmaesCol     = getAlgColors('cmaes'); % dark blue
cmaes2popCol = getAlgColors(14); % black
saacmesCol   = getAlgColors('saacmes'); % light blue
lmmCol       = getAlgColors(23); % 23=middle yellow % getAlgColors('lmmcmaes');
bobyqaCol    = getAlgColors(2); % azure
smacCol      = getAlgColors('smac');
fminconCol   = getAlgColors(1); % 1=light green
fmincon_pureCol = getAlgColors(22); % 22=darker green

% color settings
scmaes_gpCol = [255, 165,   0];  % orange (#ffa500)
dts005Col    = [255,   0,   0];  % light red (#ff0000)
dts_adaptCol = [255,   0, 255];  % magenta (#ff00ff)
maesCol      = [154, 205,  50];  % yellow grass green (#9acd32)
gpopCol      = [  0,   0, 255];  % middle blue (#0000ff)
% sapeoCol     = [207, 207,   0];  % slightly darker middle yellow
sapeoCol     = [133, 55,  106];  % dark violet (#85376a)
cmaesCol     = [  0,   0, 128];  % navy blue (#000080)
cmaes2popCol = [  0, 191, 191];  % light petroleum (#00bfbf)
saacmesCol   = [100, 149, 237];  % cornflower blue (#6495ed)
lmmCol       = [173, 255,  47];  % shining light green (#adff2f)
bobyqaCol    = [ 12, 240, 248];  % light azure
smacCol      = [255, 192, 203];  % solomon pink (#ffc0cb)
fminconCol   = getAlgColors(23); % 23=middle yellow
fmincon_pureCol = [  0, 127,   0]; % dark forrest green (#007f00)

scmaesMark      = 'p';
dts005Mark      = '>';
dts_adaptMark   = 'd';
maesMark        = '^';
gpopMark        = 'v';
sapeoMark       = '<';
cmaesMark       = 'x';
cmaes2popMark   = '+';
saacmesMark     = 'o';
lmmMark         = 's';
bobyqaMark      = '<';
smacMark        = 'd';
fminconMark     = '>';
fmincon_pureMark = 'p';

if (~exist(tmpFName, 'file'))
  save(tmpFName);
end

end

%% Criteria comparison

data = {...
        dts_critfvalues_data, ...
        dts_critsd2_data, ...
        dts_critei_data, ...
        dts005_multimodel_data, ...
        dts_criterde_data ...
        % dts_adapt_data ...
        };
datanames = {...
    'GP predictive mean (M)', ...
    'GP predictive stand. deviation (STD)', ...
    'Expected improvement (EI)', ...
    'Probability of improvement (PoI)', ...
    'Expected RDE (ERDE)' ...
    % 'adaptive DTS-CMA-ES' ...
    };

% colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol]/255;
% markers = {scmaesMark, dts005Mark, dts_adaptMark, maesMark, gpopMark};
colors = [maesCol; gpopCol; bobyqaCol; dts005Col; [0,0,0]]/255; % ; dts_adaptCol]/255;
markers = {'o', 'p', 's', dts005Mark, '^'}; % , dts_adaptMark};

%{
% Results separately for selected functions, not used anymore...
plotFuns = [2, 4, 8, 11, 17, 23];
plotDims = [20];
clear pdfNames
pdfNames = {};
for f = plotFuns
  for d = plotDims
    pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('criteria_f%d_%dD', f, d));
  end
end
close all
han = relativeFValuesPlot(data, ...
                              'DataNames', datanames, 'DataDims', funcSet.dims, ...
                              'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                              'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                              'AggregateDims', false, 'OneFigure', false, ...
                              'Statistic', @median, ... 'quantile', ... % @median, ...
                              ... % 'Quantiles', [true(1,5), false(1,7)], ...
                              'AggregateFuns', false, ...
                              'LineSpecification', '-', ...
                              ... % 'LineWidth', [ 2*ones(1,5), ones(1,7) ], ...
                              'LegendOption', 'split', 'MaxEval', maxEvals, ...
                              'Markers', markers, ...
                              'FunctionNames', true);
print2pdf(han, pdfNames, 1)
%}

% Aggregated criteria comparison on unimodal and multimodal functions
plotFunsUnimodal = [1,2,8:14];
plotFunsMultimodal = [3,4,15:24]; %,17:19,21,22];
plotDims = [5, 20];
clear pdfNames
pdfNamesUnimodal = {};
pdfNamesMultimodal = {};
for d = plotDims
  pdfNamesUnimodal{end+1} = fullfile(plotResultsFolder, sprintf('criteria_unimodal_%dD', d));
  pdfNamesMultimodal{end+1} = fullfile(plotResultsFolder, sprintf('criteria_multimodal_%dD', d));
end
close all
han = relativeFValuesPlot(data, ...
                              'DataNames', datanames, 'DataDims', funcSet.dims, ...
                              'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                              'PlotFuns', plotFunsUnimodal, 'PlotDims', plotDims, ...
                              'AggregateDims', false, 'OneFigure', false, ...
                              'Statistic', @median, ... 'quantile', ... % @median, ...
                              ... % 'Quantiles', [true(1,5), false(1,7)], ...
                              'AggregateFuns', true, ...
                              'LineSpecification', '-', ...
                              ... % 'LineWidth', [ 2*ones(1,5), ones(1,7) ], ...
                              'LegendOption', 'split', 'MaxEval', maxEvals, ...
                              'Markers', markers, ...
                              'PlotGrid', [2, 2], ...
                              'FunctionNames', true);
print2pdf(han, pdfNamesUnimodal, 1)

han = relativeFValuesPlot(data, ...
                              'DataNames', datanames, 'DataDims', funcSet.dims, ...
                              'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                              'PlotFuns', plotFunsMultimodal, 'PlotDims', plotDims, ...
                              'AggregateDims', false, 'OneFigure', false, ...
                              'Statistic', @median, ... 'quantile', ... % @median, ...
                              ... % 'Quantiles', [true(1,5), false(1,7)], ...
                              'AggregateFuns', true, ...
                              'LineSpecification', '-', ...
                              ... % 'LineWidth', [ 2*ones(1,5), ones(1,7) ], ...
                              'LegendOption', 'hide', 'MaxEval', maxEvals, ...
                              'Markers', markers, ...
                              'PlotGrid', [1, 2], ...
                              'FunctionNames', true);
print2pdf(han, pdfNamesMultimodal, 1)


%% GP-based algorithm comparison
% Scaled function values of f1-f24 in dimensions 5, 10 and 20.

for plotDims = [5, 10, 20]
  %%
  data = {...
          scmaes_gp_data, ...
          dts005_data, ...
          dts_adapt_data, ...
          maes_data, ...
          gpop_data, ...
          sapeo_data, ...
          cmaes_data, ...
          cmaes2pop_data, ...
          saacmes_data, ...
          lmm_data, ...
          bobyqa_data, ...
          smac_data, ...
          fmincon_pure_data ...
          };
  datanames = {...
      'S-CMA-ES', ...
      '0.05/2pop DTS-CMA-ES', ...
      'adaptive DTS-CMA-ES', ...
      'MA-ES', ...
      'GPOP', ...
      'SAPEO', ...
      'CMA-ES', ...
      'CMA-ES 2pop', ...
      'BIPOP-{}^{s*}ACMES-k', ...
      'lmm-CMA', ...
      'BOBYQA', ...
      'SMAC', ...
      'fmincon' ...
      };

  % colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol]/255;
  % markers = {scmaesMark, dts005Mark, dts_adaptMark, maesMark, gpopMark};
  colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol; sapeoCol; ...
      cmaesCol; cmaes2popCol; saacmesCol; lmmCol; bobyqaCol; smacCol; fmincon_pureCol]/255;
  % set up pastel tones of the non-GP algorithms except SMAC which is
  % already very light
  % % - more intesive brightening for CMA-ES, CMA-ES 2pop, and fmincon
  % colors([6,7,12],:) = colors([6,7,12],:) + 0.7*(1 - colors([6,7,12],:));
  % % - not too much added brightness for saACM-ES, lmm-CMA, and BOBYQA
  % colors([8,10],:)   = colors([8,10],:)   + 0.5*(1 - colors([8,10],:));
  % colors(9,:)        = colors(9,:)        + 0.2*(1 - colors(9,:));

  % gray = [192, 192, 192];
  % colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol;
  %     repmat(gray, 7, 1)]/255;
  markers = {scmaesMark, dts005Mark, dts_adaptMark, maesMark, gpopMark, sapeoMark, ...
      cmaesMark, cmaes2popMark, saacmesMark, lmmMark, bobyqaMark, smacMark, fmincon_pureMark};

  plotFuns = 1:24;
  % plotDims = [5, 10, 20];

  clear pdfNames
  pdfNames = {};
  for f = plotFuns
    for d = plotDims
      pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('gpalgs_f%d_%dD', f, d));
    end
  end

  close all
  han = relativeFValuesPlot(data, ...
                                'DataNames', datanames, 'DataDims', funcSet.dims, ...
                                'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                                'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                                'AggregateDims', false, 'OneFigure', false, ...
                                'Statistic', 'quantile', ... 'quantile', ... % @median, ...
                                'Quantiles', [true(1,6), false(1,7)], ...
                                'AggregateFuns', false, ...
                                'LineSpecification', '-', ...
                                'LineWidth', [ 2*ones(1,6), ones(1,7) ], ...
                                'LegendOption', 'split', 'MaxEval', maxEvals, ...
                                'Markers', markers, ...
                                'PlotGrid', [8, 3], ...
                                'ScaleY08', false, ...
                                'FunctionNames', true);

  print2pdf(han, pdfNames, 1)
end

%{
scmaes_gpCol = [255, 165,   0];  % orange (#ffa500)
dts005Col    = [255,   0,   0];  % light red (#ff0000)
dts_adaptCol = [255,   0, 255];  % magenta (#ff00ff)
maesCol      = [154, 205,  50];  % yellow grass green (#9acd32)
gpopCol      = [  0,   0, 255];  % middle blue (#0000ff)
cmaesCol     = [  0,   0, 128];  % navy blue (#000080)
cmaes2popCol = [  0, 191, 191];  % light petroleum (#00bfbf)
saacmesCol   = [100, 149, 237];  % cornflower blue (#6495ed)
lmmCol       = [173, 255,  47];  % shining light green (#adff2f)
bobyqaCol    = [ 12, 240, 248];  % light azure
smacCol      = [255, 192, 203];  % solomon pink (#ffc0cb)
fminconCol   = getAlgColors(23); % 23=middle yellow
fmincon_pureCol = [  0, 127,   0]; % dark forrest green (#007f00)
%}

%% Algorithm comparison: CMA-ES, MA-ES, lmm-CMA, saACMES, S-CMA-ES, DTS-CMA-ES
% Scaled function values of f1-f24 in dimensions 5, 10 and 20.

for plotDims = [5, 10, 20]
  %%
  data = {...
          scmaes_gp_data, ...
          dts005_data, ...
          dts_adapt_data, ...
          maes_data, ...
          gpop_data, ...
          sapeo_data, ...
          cmaes_data, ...
          cmaes2pop_data, ...
          saacmes_data, ...
          lmm_data, ...
          bobyqa_data, ...
          smac_data, ...
          ... % fmincon_data, ...
          fmincon_pure_data ...
          };

  datanames = {...
      'S-CMA-ES', ...
      '0.05/2pop DTS-CMA-ES', ...
      'adaptive DTS-CMA-ES', ...
      'MA-ES', ...
      'GPOP', ...
      'SAPEO', ...
      'CMA-ES', ...
      'CMA-ES 2pop', ...
      'BIPOP-{}^{s*}ACMES-k', ...
      'lmm-CMA', ...
      'BOBYQA', ...
      'SMAC', ...
      ... % 'MLSL/fmincon', ...
      'fmincon' ...
      };

  colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol; sapeoCol; ...
      cmaesCol; cmaes2popCol; saacmesCol; lmmCol; bobyqaCol; smacCol; fmincon_pureCol]/255;
  markers = {scmaesMark, dts005Mark, dts_adaptMark, maesMark, gpopMark, sapeoMark, ...
      cmaesMark, cmaes2popMark, saacmesMark, lmmMark, bobyqaMark, smacMark, fmincon_pureMark};

  plotFuns = 1:24;
  % plotDims = [5, 10, 20];

  clear pdfNames
  pdfNames = {};
  for f = plotFuns
    for d = plotDims
      pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('all_f%d_%dD', f, d));
    end
  end

  close all
  han = relativeFValuesPlot(data, ...
                                'DataNames', datanames, 'DataDims', funcSet.dims, ...
                                'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                                'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                                'AggregateDims', false, 'OneFigure', false, ...
                                'Statistic', @median, 'AggregateFuns', false, ...
                                'LineSpecification', '-', ...
                                'LineWidth', [ 1*ones(1,6), 1*ones(1,7) ], ...
                                'LegendOption', 'split', 'MaxEval', maxEvals, ...
                                'Markers', markers, ...
                                'PlotGrid', [8, 3], ...
                                'ScaleY08', false, ...
                                'FunctionNames', true);

  print2pdf(han, pdfNames, 1)
end

%% Aggregated algorithm comparison: CMA-ES, MA-ES, lmm-CMA, saACMES, S-CMA-ES, DTS-CMA-ES
% Aggregated  scaled function values in dimensions 5, 10 and 20.

plotDims = [2, 5, 10, 20];

data = {...
        scmaes_gp_data, ...
        dts005_data, ...
        dts_adapt_data, ...
        maes_data, ...
        gpop_data, ...
        sapeo_data, ...
        cmaes_data, ...
        cmaes2pop_data, ...
        saacmes_data, ...
        lmm_data, ...
        bobyqa_data, ...
        smac_data, ...
        ... % fmincon_data, ...
        fmincon_pure_data ...
        };

datanames = {...
    'S-CMA-ES', ...
    '0.05/2pop DTS-CMA-ES', ...
    'adaptive DTS-CMA-ES', ...
    'MA-ES', ...
    'GPOP', ...
    'SAPEO', ...
    'CMA-ES', ...
    'CMA-ES 2pop', ...
    'BIPOP-{}^{s*}ACMES-k', ...
    'lmm-CMA', ...
    'BOBYQA', ...
    'SMAC', ...
    ... % 'MLSL/fmincon', ...
    'fmincon' ...
    };

colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol; sapeoCol; ...
    cmaesCol; cmaes2popCol; saacmesCol; lmmCol; bobyqaCol; smacCol; fmincon_pureCol]/255;
markers = {scmaesMark, dts005Mark, dts_adaptMark, maesMark, gpopMark, sapeoMark, ...
    cmaesMark, cmaes2popMark, saacmesMark, lmmMark, bobyqaMark, smacMark, fmincon_pureMark};

plotFuns = 1:24;

clear pdfNames
pdfNames = {};
for d = plotDims
  pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('all_agg_%dD', d));
end

close all
han = relativeFValuesPlot(data, ...
                              'DataNames', datanames, 'DataDims', funcSet.dims, ...
                              'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                              'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                              'AggregateDims', false, 'OneFigure', false, ...
                              'Statistic', @median, 'AggregateFuns', true, ...
                              'LineSpecification', {'-', '-', '-', '-', '-', '-', '-'}, ...
                              'LegendOption', 'split', 'MaxEval', maxEvals, ...
                              'Markers', markers, ...
                              'PlotGrid', [2, 2], ...
                              'FunctionNames', true);



print2pdf(han, pdfNames, 1)

%% Multiple comparison of algorithms with a statistical posthoc test.

close all

tableFunc = funcSet.BBfunc;
tableDims = [5, 20];

resultDuelTable = fullfile(tableFolder, 'multicompare.tex');
resultStatsTable = fullfile(tableFolder, 'rankings.tex');

data = {...
        scmaes_gp_data, ...
        dts005_data, ...
        dts_adapt_data, ...
        maes_data, ...
        gpop_data, ...
        sapeo_data, ...
        cmaes_data, ...
        cmaes2pop_data, ...
        saacmes_data, ...
        lmm_data, ...
        bobyqa_data, ...
        smac_data, ...
        ... % fmincon_data, ...
        fmincon_pure_data ...
        };

datanames = {...
    'S-CMA-ES', ...
    '0.05 DTS', ...
    'adp. DTS', ...
    'MA-ES', ...
    'GPOP', ...
    'SAPEO', ...
    'CMA-ES', ...
    'CMA-ES 2pop', ...
    '\\saACMES', ...
    '\\lmmCMA', ...
    'BOBYQA', ...
    'SMAC', ...
    'fmincon'
    };

[table, ranks] = duelTable(data, 'DataNames', datanames, ...
                            'DataFuns', funcSet.BBfunc, 'DataDims', funcSet.dims, ...
                            'TableFuns', tableFunc, 'TableDims', tableDims, ...
                            'Evaluations', [1/3 1], ...
                            'ResultFile', resultDuelTable, ...
                            'PrintHeader', false);

tableDims = [5, 20];
[stats, meanRanks] = multCompStatsTable(data, 'DataNames', datanames, ...
                       'DataFuns', funcSet.BBfunc, 'DataDims', funcSet.dims, ...
                       'TableFuns', tableFunc, 'TableDims', tableDims, ...
                       'Evaluations', [1/3 1], ...
                       'ResultFile', resultStatsTable, ...
                       'PrintHeader', false);

%% final clearing
close all
